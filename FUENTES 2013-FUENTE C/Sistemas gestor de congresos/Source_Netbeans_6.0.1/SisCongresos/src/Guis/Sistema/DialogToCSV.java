/*
 * DialogToCSV.java
 *   Dialog para exportar una tabla a un archivo formato CSV
 * Parte de proyecto: SisCongresos
 * Author: Pedro Cardoso Rdz
 * Mail: cardp_2004@yahoo.com.mx
 * Place: Zacatecas Mexico
 * 
    Copyright Â© 2010 Pedro Cardoso Rodriguez

    SisCongresos is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SisCongresos is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SisCongresos.  If not, see <http://www.gnu.org/licenses/>
 */

package Guis.Sistema;

import java.awt.Color;
import java.io.IOException;
import javax.swing.table.TableModel;

/**
 * @author  Pedro Cardoso Rodriguez
 */
public class DialogToCSV extends javax.swing.JDialog {
    
    private TableModel modelo;
    private javax.swing.JCheckBox[] chkBtnCol;
    private int tipo;
    
    /** Creates new form DialogToCSV */
    public DialogToCSV(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        Thread.setDefaultUncaughtExceptionHandler(new Logica.CatchUnhandledErrors((Ventana)parent));
        initComponents();
        btnClose.setColors(new Color(205,226,252),new Color(180,205,243),new Color(155,255,255));
        btnExporta.setColors(new Color(205,226,252),new Color(180,205,243),new Color(155,255,255));
    }
    
    /** Establece el model de la tabla que se desea exportar
     * @param tipo Tipo de tabla donde 1=staff, 2=Eventos, 3=ponentes y 4=asistentes
     * @param modelo Model de la tabla
     */
    public void setModelTabla(int tipo, TableModel modelo){
        int dif=(tipo==3?2:1);
        int nCols=modelo.getColumnCount();
        String[] titles={"Personal","Eventos","Ponentes","Asistentes"};
        chkBtnCol=new javax.swing.JCheckBox[nCols];
        lblTitle.setText("Exportar: "+titles[tipo-1]+" a CSV");
        pnlColumnas.setLayout(new java.awt.GridLayout(nCols,0));
        for(int h=dif;h<nCols;h++){
            chkBtnCol[h-dif]=new javax.swing.JCheckBox(modelo.getColumnName(h));
            chkBtnCol[h-dif].setSelected(true);
            pnlColumnas.add(chkBtnCol[h-dif]);
        }
        this.tipo=tipo; this.modelo=modelo;
        setLocationRelativeTo(null);
        setVisible(true);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlAll = new javax.swing.JPanel();
        pnlNorth = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        btnClose = new com.guis.SimpleButton();
        pnlContainer = new javax.swing.JPanel();
        btnExporta = new com.guis.SimpleButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pnlColumnas = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        pnlAll.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 255), 3, true));
        pnlAll.setLayout(new java.awt.BorderLayout());

        pnlNorth.setBackground(new java.awt.Color(205, 226, 252));

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblTitle.setText("Exportar a CSV");

        btnClose.setText("X");
        btnClose.setFont(new java.awt.Font("Tahoma", 1, 11));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNorthLayout = new javax.swing.GroupLayout(pnlNorth);
        pnlNorth.setLayout(pnlNorthLayout);
        pnlNorthLayout.setHorizontalGroup(
            pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNorthLayout.createSequentialGroup()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 134, Short.MAX_VALUE)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlNorthLayout.setVerticalGroup(
            pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlAll.add(pnlNorth, java.awt.BorderLayout.NORTH);

        pnlContainer.setBackground(new java.awt.Color(223, 232, 254));

        btnExporta.setText("Exportar");
        btnExporta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportaActionPerformed(evt);
            }
        });

        jLabel1.setText("Columnas a exportar:");

        pnlColumnas.setBackground(new java.awt.Color(223, 232, 254));

        javax.swing.GroupLayout pnlColumnasLayout = new javax.swing.GroupLayout(pnlColumnas);
        pnlColumnas.setLayout(pnlColumnasLayout);
        pnlColumnasLayout.setHorizontalGroup(
            pnlColumnasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 237, Short.MAX_VALUE)
        );
        pnlColumnasLayout.setVerticalGroup(
            pnlColumnasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(pnlColumnas);

        javax.swing.GroupLayout pnlContainerLayout = new javax.swing.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 90, Short.MAX_VALUE)
                        .addComponent(btnExporta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnExporta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnlAll.add(pnlContainer, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlAll, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnExportaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportaActionPerformed
        String aux;
        java.io.BufferedWriter bfWr;
        String archivo=pideNomArchivo();
        int dif=(tipo==3?2:1);
        if(archivo==null) return;
        try{
            bfWr=new java.io.BufferedWriter(new java.io.FileWriter(archivo));
            for(int f=0;f<modelo.getRowCount();f++){
                aux="";
                for(int v=dif;v<modelo.getColumnCount();v++){
                    aux+=""+(chkBtnCol[v-dif].isSelected()?"\""+modelo.getValueAt(f,v)+"\"":"");
                    aux+=(v<(modelo.getColumnCount()-1) && chkBtnCol[v-dif].isSelected()?",":"");
                }
                aux+="\n";
                bfWr.write(aux);
            }
            bfWr.close();
            ((Ventana)getParent()).message("<html>Los datos de la tabla se han exportado</html>",DialogMessages.INF_MESS);
            dispose();
        }
        catch(IOException ioExc){
            ((Ventana)getParent()).message("<html>Ocurrio un fallo al escribir archivo<br><font color=\"red\">"+ioExc.getMessage()+"</font></html>",DialogMessages.ERROR_MESS);
        }
}//GEN-LAST:event_btnExportaActionPerformed
    
    /** Pide al usuario el nombre del archivo en el cual guardar los datos en formato CSV
     * @return el nombre del archivo en el cual guardar los datos en formato CSV
     *   o null si el usuario cancelo la operacion
     */
    private String pideNomArchivo(){
        javax.swing.JFileChooser cajaArchivo;
        javax.swing.filechooser.FileNameExtensionFilter exts = new javax.swing.filechooser.FileNameExtensionFilter("Archivo CSV","csv");
        java.io.File archivo;
        int opcion;
        cajaArchivo = new javax.swing.JFileChooser();
        cajaArchivo.setFileFilter(exts);
        opcion = cajaArchivo.showSaveDialog(this);
        if(opcion==javax.swing.JFileChooser.APPROVE_OPTION){
            archivo=cajaArchivo.getSelectedFile();
            if(archivo.isFile()){
                if(!((Ventana)getParent()).askYesNoOption("<html>El archivo: <b>"+archivo.getName()+"</b><br>Â¿Desea sobreescribirlo?</html>"))
                    return null;
            }
            return archivo.getPath()+".csv";
        }
        return null;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.guis.SimpleButton btnClose;
    private com.guis.SimpleButton btnExporta;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlAll;
    private javax.swing.JPanel pnlColumnas;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlNorth;
    // End of variables declaration//GEN-END:variables
    
}
