/*
 * Ventana.java
 *   Ventana principal del sistema
 * Parte de proyecto: SisCongresos
 * Author: Pedro Cardoso Rdz
 * Mail: cardp_2004@yahoo.com.mx
 * Place: Zacatecas Mexico
 * 
    Copyright Â© 2010 Pedro Cardoso Rodriguez

    SisCongresos is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SisCongresos is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SisCongresos.  If not, see <http://www.gnu.org/licenses/>
 */

package Guis.Sistema;

import java.awt.Cursor;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Map;

/**
 * @author  Pedro Cardoso Rodriguez
 */
public class Ventana extends javax.swing.JFrame {
    
    private int xonscreen;
    private int yonscreen;
    private int xIni;
    private int yIni;
    private java.awt.Dimension dim;
    private java.awt.Point lugar;
    private boolean maximizado;
    private java.awt.Dimension dimt;
    private MainControls controls;
    private java.util.ArrayList<ContDatos> congresos; // lista de congresos actuales
    private DialogPrint printer;
    private Ayuda ayuda;
    
    /** Creates new form SimpleJFrame */
    public Ventana() {
        Thread.setDefaultUncaughtExceptionHandler(new Logica.CatchUnhandledErrors(this));
        initComponents();
        setSize(780,625);
        setLocationRelativeTo(null);
        setTitle("Manejador de datos de Congresos");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/Iconos/congresos.png")).getImage());
        validateTree();
        xonscreen=getLocation().x;
        yonscreen=getLocation().y;
        dim=getSize();
        lugar=getLocation();
        maximizado=false;
        dimt=java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        btnClose.setFocusable(false);
        btnMaxi.setFocusable(false);
        btnMini.setFocusable(false);
        buscaConex();
        controls=new MainControls();
        controls.setColor(new Color(195,218,253),new Color(170,220,249),new Color(155,255,255));
        pnlContainer.add(controls,java.awt.BorderLayout.WEST);
        controls.setOrientacion(1);
        btnMini.setColors(new Color(180,205,243),new Color(223,232,254),new Color(170,220,249));
        btnMaxi.setColors(new Color(180,205,243),new Color(223,232,254),new Color(170,220,249));
        btnClose.setColors(new Color(180,205,243),new Color(223,232,254),new Color(170,220,249));
        ayuda=null;
        if(BaseDatos.ConectaBD.hayConexion()) controls.checkConn();
        congresos = new java.util.ArrayList<ContDatos>();
    }
    
    /** Revisa si existe el archivo con los parametros de conexion al servidor para conectar automaticamente
     */
    private static void buscaConex(){
        String sep=java.io.File.separator;
        java.io.File file = new java.io.File("lib"+sep+"SisCongresos.d1");
        String[] data;
        if(file.isFile()){
            data = new String[4];
            try{
                java.io.FileInputStream arSrc = new java.io.FileInputStream("lib"+sep+"SisCongresos.d1");
                java.io.ObjectInputStream dtSrc = new java.io.ObjectInputStream(arSrc);
                for(int t=0;t<4;t++) data[t] = (String)dtSrc.readObject();
                BaseDatos.ConectaBD.conecta(data[0],Integer.parseInt(data[1]),data[2],data[3]);
                dtSrc.close();         
            }
            catch(java.io.IOException ioExc){}
            catch(ClassNotFoundException cnfExc){}
            catch(NullPointerException npExc){}
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlAll = new javax.swing.JPanel();
        pnlNorth = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        btnClose = new com.guis.SimpleButton();
        btnMaxi = new com.guis.SimpleButton();
        btnMini = new com.guis.SimpleButton();
        pnlContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SimpleJFrame");
        setUndecorated(true);

        pnlAll.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 255), 3, true));
        pnlAll.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                pnlAllMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlAllMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnlAllMouseReleased(evt);
            }
        });
        pnlAll.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlAllMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                pnlAllMouseMoved(evt);
            }
        });
        pnlAll.setLayout(new java.awt.BorderLayout());

        pnlNorth.setBackground(new java.awt.Color(180, 205, 243));
        pnlNorth.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlNorthMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pnlNorthMouseEntered(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                pnlNorthMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                pnlNorthMouseReleased(evt);
            }
        });
        pnlNorth.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                pnlNorthMouseDragged(evt);
            }
        });

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 14));
        lblTitle.setText(" Title");

        btnClose.setMnemonic('X');
        btnClose.setText("X");
        btnClose.setToolTipText("Cerrar Alt+X");
        btnClose.setFont(new java.awt.Font("Tahoma", 1, 11));
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnMaxi.setText("[ ]");
        btnMaxi.setFont(new java.awt.Font("Tahoma", 1, 11));
        btnMaxi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaxiActionPerformed(evt);
            }
        });

        btnMini.setText("_");
        btnMini.setFont(new java.awt.Font("Tahoma", 1, 11));
        btnMini.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMiniActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlNorthLayout = new javax.swing.GroupLayout(pnlNorth);
        pnlNorth.setLayout(pnlNorthLayout);
        pnlNorthLayout.setHorizontalGroup(
            pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNorthLayout.createSequentialGroup()
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 550, Short.MAX_VALUE)
                .addComponent(btnMini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnMaxi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlNorthLayout.setVerticalGroup(
            pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNorthLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(lblTitle, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE)
                .addComponent(btnClose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnMaxi, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(btnMini, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pnlAll.add(pnlNorth, java.awt.BorderLayout.NORTH);

        pnlContainer.setBackground(new java.awt.Color(170, 215, 253));
        pnlContainer.setLayout(new java.awt.BorderLayout());
        pnlAll.add(pnlContainer, java.awt.BorderLayout.CENTER);

        getContentPane().add(pnlAll, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pnlNorthMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlNorthMouseDragged
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        int auxx=0;
        int auxy=0;
        if(dimt.equals(getSize())) return;
        if(xIni!=x){
            if(x>xIni) auxx=(xIni-x)*-1;
            else auxx=(x-xIni);
        }
        if(yIni!=y){
            if(y>yIni) auxy=(yIni-y)*-1;
            else auxy=(y-yIni);
        }
        setLocation(xonscreen+auxx,yonscreen+auxy);
    }//GEN-LAST:event_pnlNorthMouseDragged

    private void pnlNorthMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlNorthMousePressed
        xIni=evt.getXOnScreen();
        yIni=evt.getYOnScreen();
    }//GEN-LAST:event_pnlNorthMousePressed

    private void pnlNorthMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlNorthMouseReleased
        xonscreen=getLocation().x;
        yonscreen=getLocation().y;
        if(getLocation().x!=0&&getLocation().y!=0) lugar=getLocation();
    }//GEN-LAST:event_pnlNorthMouseReleased

    private void pnlAllMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlAllMouseDragged
        int x=evt.getXOnScreen();
        int y=evt.getYOnScreen();
        int auxx=0;
        int auxy=0;
        if(x!=xIni){
            if(x>xIni) auxx=(x-xIni);
            else auxx=(xIni-x)*-1;
        }
        if(y!=yIni){
            if(y>yIni) auxy=(y-yIni);
            else auxy=(yIni-y)*-1;
        }
        auxx+=getSize().width; auxy+=getSize().height;
        setSize((auxx>210?auxx:210),(auxy>35?auxy:35));
        xIni=(x>210?x:xIni); yIni=(y>35?y:yIni);
    }//GEN-LAST:event_pnlAllMouseDragged

    private void pnlAllMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlAllMouseMoved
        int x=evt.getX();
        int y=evt.getY();
        if(x>=(getSize().width-3)){ 
            setCursor(new Cursor(Cursor.SE_RESIZE_CURSOR));
            return;
        }
        else setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        if(y>=(getSize().height-3)) setCursor(new Cursor(Cursor.SE_RESIZE_CURSOR));
        else setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_pnlAllMouseMoved

    private void pnlAllMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlAllMousePressed
        xIni=evt.getXOnScreen();
        yIni=evt.getYOnScreen();
    }//GEN-LAST:event_pnlAllMousePressed

    private void pnlNorthMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlNorthMouseClicked
        if(evt.getClickCount()==2) maximiza();
    }//GEN-LAST:event_pnlNorthMouseClicked

    private void pnlAllMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlAllMouseReleased
        dim=getSize();
    }//GEN-LAST:event_pnlAllMouseReleased

    private void pnlNorthMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlNorthMouseEntered
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_pnlNorthMouseEntered

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        salir();
}//GEN-LAST:event_btnCloseActionPerformed

    private void btnMiniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMiniActionPerformed
        minimiza();
}//GEN-LAST:event_btnMiniActionPerformed

    private void btnMaxiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaxiActionPerformed
       maximiza();
}//GEN-LAST:event_btnMaxiActionPerformed

    private void pnlAllMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlAllMouseExited
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_pnlAllMouseExited
    
    @Override
    public void setTitle(String tit){
        super.setTitle(tit);
        lblTitle.setText(" "+tit);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Logica.Tiempo.inicia();
                new Ventana().setVisible(true);
            }
        });
    }
    
    public void minimiza(){ setState(java.awt.Frame.ICONIFIED); }
    
    public void maximiza(){
        if(maximizado){
            setLocation(lugar);
            setSize(dim);
            maximizado=false;
            xonscreen=getLocation().x;
            yonscreen=getLocation().y;
        }
        else{
            setLocation(0,0);
            setSize(dimt);
            maximizado=true;
            xonscreen=0;
            yonscreen=0;
        }
    }
   
    /** Termina la ejecucion del sistema, antes revisa si hay cambios en los datos
     *   sin guardar y si es asi pregunta antes de terminar si desea ignorar los cambios
     */
    public void salir(){
        boolean bandera=false;
        String mess="<html>Hay cambios sin guardar<br>";
        String aux;
        for(int g=0;g<congresos.size();g++){
            aux=(congresos.get(g)).hayCambios();
            if(aux!=null){
                mess+=aux;
                bandera=true;
            }
        }
        if(bandera){
            mess+="<br>Si sale ahora se perderan esos cambios<br>Â¿Desea salir?</html>";
            if(!this.askYesNoOption(mess)) return;
        }
        if(ayuda!=null) ayuda=null;
        System.exit(0);
    }
   
    /** Carga los datos de un congreso
     * @param clave La clave del congreso a cargar
     * @param nombre El nombre del congreso a cargar
     */
    public void cargaCongreso(int clave,String nombre){
        ContDatos conttemp=null;
        limpiaPnlContainer();
        for(int g=0;g<congresos.size();g++){
            conttemp=congresos.get(g);
            if(conttemp.getClave()==clave) break;
            else conttemp=null;
        }
        if(conttemp==null){
            conttemp=new ContDatos();
            pnlContainer.add(conttemp,java.awt.BorderLayout.CENTER);
            if(!conttemp.cargaCongreso(clave,nombre))
                limpiaPnlContainer();
            else congresos.add(conttemp);
        }
        else pnlContainer.add(conttemp,java.awt.BorderLayout.CENTER);
        pnlContainer.setVisible(true);
    }
    
    private void limpiaPnlContainer(){
        pnlContainer.setVisible(false); pnlContainer.removeAll();
        pnlContainer.add(controls,java.awt.BorderLayout.WEST);
    }
  
    /** Quita un congreso de la lista de congresos actuales
     * @param clave La clave del congreso a quitar de la lista
     */
    public void quitaCongreso(int clave){
        ContDatos conttemp=null;
        for(int g=0;g<congresos.size();g++){
            conttemp=congresos.get(g);
            if(conttemp.getClave()==clave){
                congresos.remove(g);
                break;
            }
        }
        pnlContainer.setVisible(false); pnlContainer.removeAll();
        pnlContainer.add(controls,java.awt.BorderLayout.WEST);
        pnlContainer.setVisible(true);
        recargaListaCons();
    }
    
    /** Ordena actulizar la lista de congresos actuales
     */
    public void recargaListaCons(){
        controls.recargaListaCons();
    }
    
    /** Muestra un mensaje
     * @param mess El texto del mensaje
     * @param type El tipo de mensaje donde: 1=Error, 2=Informacion, 3=pregunta
     */
    public void message(String message,int type){
        DialogMessages mensaje = new DialogMessages(((javax.swing.JFrame)getParent()),true);
        mensaje.setMessage(message,type);
    }
 
    /** Pregunta por una desicion que se pueda responder con si o no
     * @param message El mensaje a mostrar con la pregunta requerida
     * @return true si el usuario dice si false en caso contrario
     */
    public boolean askYesNoOption(String message){
        DialogAskFor pregunta = new DialogAskFor(((javax.swing.JFrame)getParent()),true);
        pregunta.setUse(message,false,"Aceptar","Cancelar",null);
        return (pregunta.getOption()==1);
    }
    
    /** Pregunta por una desicion que se pueda responder con si, no o cancelar
     * @param message El mensaje a mostrar con la pregunta requerida
     * @return La respuesta del usuario 1=Si, 2=No, 3=cancelar
     */
    public int askYesNoCancelOption(String message){
        DialogAskFor pregunta = new DialogAskFor(((javax.swing.JFrame)getParent()),true);
        pregunta.setUse(message,false,"Si","No","Cancelar");
        return pregunta.getOption();
    }
    
    /** Pregunta por una entrada tipo string
     * @param message El mensaje a mostrar con la pregunta requerida
     * @return null si en usuario cancelo o la cadena ingresada
     */
    public String askForString(String message){
        DialogAskFor pregunta = new DialogAskFor(((javax.swing.JFrame)getParent()),true);
        pregunta.setUse(message,true,"Aceptar","Cancelar",null);
        if(pregunta.getOption()==2) return null;
        return pregunta.getInput();
    }
    
    /** Envia la impresion recibida al dialogo de impresion
     * @param tit Titulo del reporte a imprimir
     * @param tipoDoc Tipo de reporte a imprimir
     *   donde: 1=lista de staff, 2=lista de eventos, 3=lista de ponentes, 4=Lista de asistentes
     * @param params parametros del documento a imprimir
     * @param lista Fuente de datos a imprimir (para los campos detail del formulario)
     */
    public void sendToPrint(String tit,int tipoDoc,Map<String,String> params,ArrayList lista){
        if(printer==null) printer=new DialogPrint(this,true);
        if(printer.setImpresion(tit, tipoDoc, params, lista)){
            printer.setLocationRelativeTo(null);
            printer.setVisible(true);
            if(printer.getResultado()==-1)
                message("<html>No se pudo imprimir<br>Ocurrio un error:<br>"+printer.getError()+"</html>",DialogMessages.ERROR_MESS);
        }
        else
            message("<html>No se pudo imprimir<br>Ocurrio un error:<br>"+printer.getError()+"</html>",DialogMessages.ERROR_MESS);
    }
  
    /** Abre el dialogo de exportar a csv 
     * @param tipo El tipo de datos a exportar donde 1=staff, 2=Eventos, 3=ponentes y 4=asistentes
     * @param modelo el model de la tabla a exportar
     */
    public void exportTablaToCSV(int tipo, javax.swing.table.TableModel modelo){
        DialogToCSV dialogo=new DialogToCSV(this,true);
        dialogo.setModelTabla(tipo, modelo);
    }
    
    /** Muestra la ventana con el manual de usuario del sistema
     */
    public void muestraAyuda(){
        if(ayuda==null) ayuda=new Ayuda(this);
        ayuda.setVisible(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.guis.SimpleButton btnClose;
    private com.guis.SimpleButton btnMaxi;
    private com.guis.SimpleButton btnMini;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlAll;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlNorth;
    // End of variables declaration//GEN-END:variables
    
}
