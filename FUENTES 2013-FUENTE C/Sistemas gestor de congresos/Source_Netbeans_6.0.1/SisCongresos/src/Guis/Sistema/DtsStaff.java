/*
 * DtsStaff.java
 *   JPanel que contiene la tabla con los registros de personal del congreso actual
 * Parte de proyecto: SisCongresos
 * Author: Pedro Cardoso Rdz
 * Mail: cardp_2004@yahoo.com.mx
 * Place: Zacatecas Mexico
 * 
    Copyright Â© 2010 Pedro Cardoso Rodriguez

    SisCongresos is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SisCongresos is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SisCongresos.  If not, see <http://www.gnu.org/licenses/>
 */

package Guis.Sistema;

import BaseDatos.FunsComms;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.table.DefaultTableModel;

/**
 * @author  Pedro Cardoso Rodriguez
 */
public class DtsStaff extends JPanel implements ActionListener, TableModelListener{
    
    private BasicArrowButton btnDisplay;
    private ContDatos contenedor; // referencia al conttenedor superior
    private boolean hayCambios;
    
    /** Creates new form BeanForm */
    public DtsStaff(ContDatos contenedor) {
        initComponents();
        this.contenedor=contenedor;
        btnDisplay=new BasicArrowButton(SwingConstants.WEST);
        btnDisplay.addActionListener(this);
        btnDisplay.setToolTipText("Desplegar "+lblTitle.getText());
        btnDisplay.setDirection(SwingConstants.NORTH);
        pnlNorth.add(btnDisplay,java.awt.BorderLayout.EAST);
        btnAgrega.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnImporta.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnQuita.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnGuarda.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnImprime.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnCSV.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        iniModelo(); hayCambios=false;
    }
    
    public void setTitle(String tit, String contentReference){
        lblTitle.setText(tit);
        btnDisplay.setToolTipText("Desplegar "+tit);
        lblTitle.setToolTipText(contentReference);
    }
    
    private void iniModelo(){
        java.util.Vector cols=new java.util.Vector();
        cols.add("clvdts"); cols.add("Cargo"); cols.add("Actividades"); cols.add("Nombre");
        cols.add("A Paterno"); cols.add("A Materno"); cols.add("Direccion"); cols.add("Ciudad");
        cols.add("Estado"); cols.add("Tel Casa"); cols.add("Tel Oficina"); cols.add("Tel Movil");
        cols.add("Titulo Profecional"); cols.add("Correo Electronico");
        jtbTabla.setModel(new ModeloStaff((DefaultTableModel)jtbTabla.getModel(),cols));
        ocultaColumna("clvdts");
        jtbTabla.getColumn("Cargo").setPreferredWidth(120);
        jtbTabla.getColumn("Actividades").setPreferredWidth(250);
        jtbTabla.getColumn("Nombre").setPreferredWidth(80);
        jtbTabla.getColumn("A Paterno").setPreferredWidth(80);
        jtbTabla.getColumn("A Materno").setPreferredWidth(80);
        jtbTabla.getColumn("Direccion").setPreferredWidth(140);
        jtbTabla.getColumn("Ciudad").setPreferredWidth(80);
        jtbTabla.getColumn("Estado").setPreferredWidth(80);
        jtbTabla.getColumn("Tel Casa").setPreferredWidth(85);
        jtbTabla.getColumn("Tel Oficina").setPreferredWidth(85);
        jtbTabla.getColumn("Tel Movil").setPreferredWidth(85);
        jtbTabla.getColumn("Titulo Profecional").setPreferredWidth(120);
        jtbTabla.getColumn("Correo Electronico").setPreferredWidth(120);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlNorth = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pnlContainer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbTabla = new javax.swing.JTable();
        btnAgrega = new com.guis.SimpleButton();
        btnImprime = new com.guis.SimpleButton();
        btnCSV = new com.guis.SimpleButton();
        btnImporta = new com.guis.SimpleButton();
        btnGuarda = new com.guis.SimpleButton();
        btnQuita = new com.guis.SimpleButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        pnlNorth.setLayout(new java.awt.BorderLayout());

        lblTitle.setText("Title");
        pnlNorth.add(lblTitle, java.awt.BorderLayout.CENTER);

        add(pnlNorth, java.awt.BorderLayout.NORTH);

        jtbTabla.setAutoCreateRowSorter(true);
        jtbTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "clvdts", "Cargo", "Actividades", "Nombre", "Mail", "A Paterno", "A Materno", "Direccion", "Ciudad", "Estado", "Tel Casa", "Tel Oficina", "Tel Movil", "Titulo Profecional", "Correo Electronico"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jtbTabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jtbTabla);
        jtbTabla.getColumnModel().getColumn(0).setPreferredWidth(80);
        jtbTabla.getColumnModel().getColumn(1).setPreferredWidth(80);
        jtbTabla.getColumnModel().getColumn(2).setPreferredWidth(80);
        jtbTabla.getColumnModel().getColumn(4).setPreferredWidth(110);
        jtbTabla.getColumnModel().getColumn(5).setPreferredWidth(150);
        jtbTabla.getColumnModel().getColumn(6).setPreferredWidth(250);

        btnAgrega.setText("Agregar");
        btnAgrega.setToolTipText("Agrega una nueva persona");
        btnAgrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregaActionPerformed(evt);
            }
        });

        btnImprime.setText("Imprimir");
        btnImprime.setToolTipText("Imprimir la tabla actual de personal");
        btnImprime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimeActionPerformed(evt);
            }
        });

        btnCSV.setText("Exportar a CSV");
        btnCSV.setToolTipText("<html>Exportar la tabla actual a archivo CSV<br>(Para abrir desde Excel)</html>");
        btnCSV.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCSVActionPerformed(evt);
            }
        });

        btnImporta.setText("Importar");
        btnImporta.setToolTipText("<html>Importa datos de personas registradas<br>con anterioridad en otro congresos o areas</html>");
        btnImporta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportaActionPerformed(evt);
            }
        });

        btnGuarda.setText("Guardar");
        btnGuarda.setToolTipText("Guardar los datos actuales de personal");
        btnGuarda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaActionPerformed(evt);
            }
        });

        btnQuita.setText("Quitar");
        btnQuita.setToolTipText("Quitar persona(s)  seleccionada(s) de la tabla");
        btnQuita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlContainerLayout = new javax.swing.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE)
                    .addGroup(pnlContainerLayout.createSequentialGroup()
                        .addComponent(btnAgrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImporta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnQuita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuarda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImprime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCSV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImprime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCSV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuarda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImporta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(pnlContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_formMouseEntered

    private void btnAgregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregaActionPerformed
        int clvcong=contenedor.getClave();
        String aux;
        ModeloStaff modelo;
        if(clvcong<1){
            aux="<html>Primero debe guardar los datos generales del congreso<br> Para poder agregar datos de personal</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return;
        }
        modelo=((ModeloStaff)jtbTabla.getModel());
        modelo.addRow(new Object[]{"-1","","","","","","","","","","","","",""});
        modelo.addTableModelListener(this);
        jtbTabla.setModel(modelo); hayCambios=true;
    }//GEN-LAST:event_btnAgregaActionPerformed

    private void btnImportaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportaActionPerformed
        DialogImportPerson bscprns;
        ModeloStaff modelo;
        String aux;
        String[] datos;
        String[] datos2;
        int clv=contenedor.getClave();
        if(clv<1){
            aux="<html>Primero debe guardar los datos generales del congreso<br> Para poder importar datos de personal</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return;
        }
        bscprns=new DialogImportPerson(((Ventana)getTopLevelAncestor()),true);
        datos=bscprns.getDatosImp();
        if(datos==null) return;
        // buscar que no existe aqui clv si no existe crear la relacion
        clv=Integer.parseInt(datos[0]);
        modelo=((ModeloStaff)jtbTabla.getModel());
        for(int y=0;y<modelo.getRowCount();y++)
            if(Integer.parseInt(""+modelo.getValueAt(y,0))==clv){
                aux="<html>La persona a importar ya esta registrada<br>No puede registrar en esta area la misma persona mas de una vez</html>";
                ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
                return;
            }
        aux="insert into personal values("+contenedor.getClave()+","+clv+",'<-- No especificado !! -->','<-- No especificado !! -->');";
        if(!BaseDatos.InsUpdBD.actualiza(aux)){
            aux="<html>No se pudo importar la persona indicada<br>Ocurrio el error: "+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return;
        }
        aux="<html>La persona indicada ha sido importada<br>Indique el cargo y actividades</html>";
        ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.INF_MESS);
        datos2=new String[datos.length+2];
        datos2[0]=datos[0]; datos2[1]="<-- No especificado !! -->"; datos2[2]="<-- No especificado !!-->";
        for(int y=1;y<datos.length;y++) datos2[y+2]=datos[y];
        modelo.addRow(datos2);
        modelo.addTableModelListener(this);
        jtbTabla.setModel(modelo); hayCambios=true;
    }//GEN-LAST:event_btnImportaActionPerformed

    private void btnImprimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimeActionPerformed
        Map<String,String> parametros = new HashMap<String,String>();
        ArrayList campos=new ArrayList();
        CamposReport.CampoStaff campo;
        String aux;
        if(jtbTabla.getRowCount()==0){
            ((Ventana)getTopLevelAncestor()).message("<html>No se puede imprimir<br>La tabla esta vacia</html>",DialogMessages.ERROR_MESS);
            return;
        }
        parametros.put("TITCONG",contenedor.getTitCon());
        parametros.put("TEMACONG",contenedor.geTemaCon());
        parametros.put("PERIODOCONG",contenedor.getPerCon());
        for(int s=0;s<jtbTabla.getRowCount();s++){
            aux=""+jtbTabla.getValueAt(s,3)+" "+jtbTabla.getValueAt(s,4)+" "+jtbTabla.getValueAt(s,5);
            campo=new CamposReport.CampoStaff(""+jtbTabla.getValueAt(s,1),aux);
            campos.add(campo);
        }
        ((Ventana)getTopLevelAncestor()).sendToPrint("Tabla de Personal",1,parametros,campos);
    }//GEN-LAST:event_btnImprimeActionPerformed

    private void btnCSVActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCSVActionPerformed
        if(jtbTabla.getRowCount()==0){
            ((Ventana)getTopLevelAncestor()).message("<html>No se puede exportar<br>La tabla esta vacia</html>",DialogMessages.ERROR_MESS);
            return;
        }
        ((Ventana)getTopLevelAncestor()).exportTablaToCSV(1,jtbTabla.getModel());
    }//GEN-LAST:event_btnCSVActionPerformed

    /** Guarda los cambios realizados en los datos de la tabla
     * @return true si se pudieron guardar lo cambios false en caso contrario
     */
    public boolean guardaCambios(){
        java.util.ArrayList<String> coms;
        String aux;
        String[] dts;
        int clvtemp;
        if(contenedor.getClave()<1){
            aux="<html>Primero debe guardar los datos generales del congreso<br> Para poder guardar datos de personal</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return false;
        }
        aux=hayDatoInvalido();
        if(aux!=null){
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return false;
        }
        coms=new java.util.ArrayList<String>();
        for(int f=0;f<jtbTabla.getRowCount();f++){ // guardar nuevos
            if(Integer.parseInt(""+jtbTabla.getValueAt(f,0))==-1){
                clvtemp=guardaFila(f);
                if(clvtemp==-1) return false;
                jtbTabla.setValueAt(""+clvtemp,f,0);
            }
            else{
                dts=getDatos(f,0);
                aux="update DtsPers set Nombre='"+dts[3]+"',Appat='"+dts[4]+"',Apmat='";
                aux+=dts[5]+"',Dir='"+dts[6]+"',Ciudad='"+dts[7]+"',Estado='"+dts[8];
                aux+="',TelCasa='"+dts[9]+"',TelOfic='"+dts[10]+"',TelMovil='"+dts[11];
                aux+="',CorreoE='"+dts[13]+"',Titulo='"+dts[12]+"' where ClvDts="+dts[0]+";";
                coms.add(aux);
                aux="update Personal set CrgFun='"+dts[1]+"',activs='"+dts[2]+"' where ClvCon=";
                aux+=contenedor.getClave()+" and ClvDts="+dts[0]+";";
                coms.add(aux);
            }
        }
        if(coms.size()>0){
            if(!BaseDatos.InsUpdBD.transaccion(coms)){ // hacer update de todo
                aux="<html>Error al intertar realizar la accion:<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
                ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
                return false;
            }
        }
        aux="<html>Accion realizada<br>Se guardaron los datos de Personal</html>";
        ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.INF_MESS);
        hayCambios=false; return true;
    }
    
    private void btnGuardaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaActionPerformed
        guardaCambios();
}//GEN-LAST:event_btnGuardaActionPerformed

    /** Revisa si hay algun dato invalido en la tabla
     * @return Cadena con la descripcion del dato invalido o null si todos los datos son validos
     */
    private String hayDatoInvalido(){
        String[] datos;
        for(int x=0;x<jtbTabla.getRowCount();x++){
            datos=getDatos(x,0);
            if(datos[1].length()<1||datos[1].length()>255)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Cargo o funcion</font> invalido, longitud invalida</html>";
            if(datos[2].length()<1||datos[2].length()>255)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Actividades</font> invalido, longitud invalida</html>";
            if(datos[3].length()<1||datos[3].length()>85)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Nombre</font> invalido, longitud invalida</html>";
            if(datos[4].length()<1||datos[4].length()>85)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Apellido paterno</font> invalido, longitud invalida</html>";
            if(datos[5].length()<1||datos[5].length()>85)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Apellido materno</font> invalido, longitud invalida</html>";
            if(datos[6].length()<1||datos[6].length()>45)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Direccion</font> invalida, longitud invalida</html>";
            if(datos[7].length()<1||datos[7].length()>25)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Ciudad</font> invalida, longitud invalida</html>";
            if(datos[8].length()<1||datos[8].length()>25)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Estado</font> invalido, longitud invalida</html>";
            if(datos[9].length()<1||datos[9].length()>10)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Telefono de casa</font> invalido, longitud invalida</html>";
            if(datos[10].length()<1||datos[10].length()>20)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Telefono de oficina</font> invalido, longitud invalida</html>";
            if(datos[11].length()<1||datos[11].length()>10)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Telefono movil</font> invalido, longitud invalida</html>";
            if(datos[12].length()>125)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Titulo Profecional</font> invalido, longitud invalida</html>";
            if(datos[13].length()<1||datos[13].length()>25)
                return "<html>Hay datos invalidos en Personal<br>En fila: "+(x+1)+", <font color=\"RED\">Correo electronico</font> invalido, longitud invalida</html>";
        }
        return null;
    }

    /** Guarda los datos de una fila de la tabla (para filas nuevas sin clave)
     * @param fila el numero de la fila a guardar
     * @return la clave generada para le registro o -1 si fallo al guardar
     */
    private int guardaFila(int fila){
        int intAux;
        String[] dts=getDatos(fila,3);
        String sen="select count(ClvDts) from DtsPers where Nombre='";
        sen+=dts[0]+"' and Appat='"+dts[1]+"' and Apmat='"+dts[2]+"';";
        intAux=BaseDatos.ConsultasBD.consultaEntero(sen);
        if(intAux==-1){
            sen="<html>Error al intentar verificar datos previos al registro<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS);
            return -1;
        }
        else if(intAux>0){
            sen="<html>Ya existe un registro a nombre de:<br><u>"+dts[0]+" "+dts[1]+" "+dts[2];
            sen+="</u><br>Si es la misma persona use el boton <u>importar</u><br>Si esta seguro que ";
            sen+="se trata de personas distintas elija continuar<br>Â¿Desea continuar?</html>";
            if(!((Ventana)getTopLevelAncestor()).askYesNoOption(sen)) return -1;
        }
        sen=dts[dts.length-1]; dts[dts.length-1]=dts[dts.length-2]; dts[dts.length-2]=sen;
        if(!BaseDatos.InsUpdBD.nuevoDtsPers(dts)){
            sen="<html>Error al intentar guardar datos de fila: "+(fila+1)+"<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS);
            return -1;
        }
        intAux=BaseDatos.InsUpdBD.obtenClave();
        dts=getDatos(fila,2);
        sen="insert into Personal values("+contenedor.getClave()+","+intAux+",'"+dts[0]+"','"+dts[1]+"');";
        if(!BaseDatos.InsUpdBD.actualiza(sen)){
            BaseDatos.InsUpdBD.actualiza("delete from DtsPers where ClvDts="+intAux+";");
            sen="<html>Error al intentar guardar datos de fila: "+(fila+1)+"<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS);
            return -1;
        }
        return intAux;
    }
    
    /** Obtiene los datos de una fila de la tabla
     * @param fila numero de fila de la tabla de la cual obtener los datos
     * @param clasif donde: 0=todos, 1=solo personales (con clave) 
     *   2=solo de staff (cargo y actividades), 3=personales (sin clave)
     * @return los datos obtenidos segun fila y clasif
     */
    private String[] getDatos(int fila, int clasif){
        int aux=jtbTabla.getColumnCount();
        String[] datos=new String[aux-(clasif==0?0:(clasif==1?2:(clasif==2?12:3)))];
        aux=0;
        for(int c=0;c<jtbTabla.getColumnCount();c++){
            if(clasif==1 && (c==1||c==2)) continue;
            else if(clasif==2 && c!=1 && c!=2) continue;
            else if(clasif==3 && (c==1||c==2||c==0)) continue;
            datos[aux]=""+jtbTabla.getValueAt(fila,c);
            aux++;
        }
        return datos;
    }
    
    private void btnQuitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitaActionPerformed
        java.util.ArrayList<String> coms;
        java.util.ArrayList<String> com;
        int[] filas=jtbTabla.getSelectedRows();
        int clave;
        String aux;
        if(filas.length<=0) return;
        aux="<html>En verdad desea quitar las personas seleccionadas de la tabla<br>";
        aux+="Esta accion no se podra deshacer<br>Â¿Desea continuar?</html>";
        if(!((Ventana)getTopLevelAncestor()).askYesNoOption(aux)) return;
        coms=new java.util.ArrayList<String>();
        for(int f=0;f<filas.length;f++){
            clave=Integer.parseInt(""+jtbTabla.getValueAt(filas[f],0));
            com=FunsComms.getComBorrarPersona(clave,1,contenedor.getClave());
            for(int g=0;g<com.size();g++) coms.add(com.get(g));
        }
        if(BaseDatos.InsUpdBD.transaccion(coms)){
            actualizaLista();
            aux="<html>Accion realizada<br>Se quitaron las personas seleccionadas</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.INF_MESS);
        }
        else{
            aux="<html>Error al intertar realizar la accion:<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
        }
    }//GEN-LAST:event_btnQuitaActionPerformed
        
    public void setColor(Color back,Color titleBar,Color body,Color borderColor,Color btnVerColor,Color toolTip){
        setBackground(back);
        pnlNorth.setBackground(titleBar);
        pnlContainer.setBackground(body);
        btnDisplay.setBackground(btnVerColor);
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11),borderColor));
        this.createToolTip().setBackground(toolTip);
        btnDisplay.createToolTip().setBackground(toolTip);
    }
   
    /** Carga los datos de la tabla
     * @return true si los datos se cargaron correctamente false en caso contrario
     */
    public boolean cargaDatos(){
        return actualizaLista();
    }
    
    /** Actualiza los datos de la tabla
     * @return true si los datos se actualizaron correctamente false en caso contrario
     */
    private boolean actualizaLista(){
        DefaultTableModel modelo;
        ModeloStaff modelo2;
        java.util.Vector cols=new java.util.Vector();
        String sen="select personal.clvdts,crgfun as 'Cargo',activs as 'Actividades',Nombre,";
        sen+="Appat as 'A Paterno',Apmat as 'A Materno',Dir as 'Direccion',Ciudad,Estado,";
        sen+="Telcasa as 'Tel Casa',telofic as 'Tel Oficina',telmovil as 'Tel Movil',Titulo ";
        sen+="as 'Titulo Profecional',correoe as 'Correo Electronico' from personal,dtspers where";
        sen+=" personal.clvdts=dtspers.clvdts and personal.clvcon="+contenedor.getClave();
        sen+=" order by appat,apmat,nombre;";
        cols.add("clvdts"); cols.add("Cargo"); cols.add("Actividades"); cols.add("Nombre");
        cols.add("A Paterno"); cols.add("A Materno"); cols.add("Direccion"); cols.add("Ciudad");
        cols.add("Estado"); cols.add("Tel Casa"); cols.add("Tel Oficina"); cols.add("Tel Movil");
        cols.add("Titulo Profecional"); cols.add("Correo Electronico");
        modelo=BaseDatos.ConsultasBD.consTipoTable(sen);
        if(modelo==null){
            sen="<html>Error al intentar actualizar la tabla de staff<br>"+BaseDatos.ConsultasBD.getError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS);
            return false;
        }
        modelo2 = new ModeloStaff(modelo,cols);
        modelo2.addTableModelListener(this);
        jtbTabla.setModel(modelo2);
        (jtbTabla.getTableHeader()).setReorderingAllowed(false);
        ocultaColumna("clvdts"); hayCambios=false;
        jtbTabla.getColumn("Cargo").setPreferredWidth(120);
        jtbTabla.getColumn("Actividades").setPreferredWidth(250);
        jtbTabla.getColumn("Nombre").setPreferredWidth(80);
        jtbTabla.getColumn("A Paterno").setPreferredWidth(80);
        jtbTabla.getColumn("A Materno").setPreferredWidth(80);
        jtbTabla.getColumn("Direccion").setPreferredWidth(140);
        jtbTabla.getColumn("Ciudad").setPreferredWidth(80);
        jtbTabla.getColumn("Estado").setPreferredWidth(80);
        jtbTabla.getColumn("Tel Casa").setPreferredWidth(85);
        jtbTabla.getColumn("Tel Oficina").setPreferredWidth(85);
        jtbTabla.getColumn("Tel Movil").setPreferredWidth(85);
        jtbTabla.getColumn("Titulo Profecional").setPreferredWidth(120);
        jtbTabla.getColumn("Correo Electronico").setPreferredWidth(120);
        return true;
    }
  
    /** Oculta una columna de la tabla
     * @param nomCol El nombre de la columna a ocultar
     */
    private void ocultaColumna(String nomCol){
        jtbTabla.getColumn(nomCol).setPreferredWidth(0);
        jtbTabla.getColumn(nomCol).setMinWidth(0);
        jtbTabla.getColumn(nomCol).setMaxWidth(0);
        jtbTabla.getColumn(nomCol).setResizable(false);
    }
  
    /** Obtiene los comandos de borrado de registros para los datos de la tabla
     * @return los comandos de borrado de registros para los datos de la tabla
     */
    public java.util.ArrayList<String> getComsDelete(){
        java.util.ArrayList<String> coms;
        java.util.ArrayList<String> com;
        int clave;
        coms=new java.util.ArrayList<String>();
        for(int y=0;y<jtbTabla.getRowCount();y++){
            clave=Integer.parseInt(""+jtbTabla.getValueAt(y,0));
            com=FunsComms.getComBorrarPersona(clave,1,contenedor.getClave());
            for(int g=0;g<com.size();g++) coms.add(com.get(g));
        }
        return coms;
    }
    
    /** Obtiene si hay cambios en los datos de la tabla sin guardar
     * @return true si hay cambios en los datos de la tabla sin guardar false en caso contrario
     */
    public boolean hayCambios(){
        return hayCambios;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.guis.SimpleButton btnAgrega;
    private com.guis.SimpleButton btnCSV;
    private com.guis.SimpleButton btnGuarda;
    private com.guis.SimpleButton btnImporta;
    private com.guis.SimpleButton btnImprime;
    private com.guis.SimpleButton btnQuita;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtbTabla;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlNorth;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        if(btnDisplay.getDirection()==SwingConstants.SOUTH){
            pnlContainer.setVisible(true);
            btnDisplay.setDirection(SwingConstants.NORTH);
        }
        else{
            pnlContainer.setVisible(false);
            btnDisplay.setDirection(SwingConstants.SOUTH);
        }
        this.getTopLevelAncestor().validate();
    }

    public void tableChanged(TableModelEvent e) {
        hayCambios=true;
    }
   
    /** Clase con la definicion del modelo de datos de la tabla */
    private class ModeloStaff extends DefaultTableModel{
        
        public ModeloStaff(DefaultTableModel m,java.util.Vector cols){
            super(m.getDataVector(),cols);
        }
        
        @Override
        public boolean isCellEditable(int row, int col){
            return (col>0);
        }
    }
}
