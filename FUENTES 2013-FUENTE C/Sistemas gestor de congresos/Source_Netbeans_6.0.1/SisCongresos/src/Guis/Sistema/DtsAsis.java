/*
 * DtsAsis.java
 *   JPanel que contiene la tabla con los registros de asistentes del congreso actual
 * Parte de proyecto: SisCongresos
 * Author: Pedro Cardoso Rdz
 * Mail: cardp_2004@yahoo.com.mx
 * Place: Zacatecas Mexico
 * 
    Copyright Â© 2010 Pedro Cardoso Rodriguez

    SisCongresos is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or any 
    later version.

    SisCongresos is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SisCongresos.  If not, see <http://www.gnu.org/licenses/>
 */

package Guis.Sistema;

import BaseDatos.FunsComms;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.plaf.basic.BasicArrowButton;
import javax.swing.table.DefaultTableModel;

/**
 * @author  Pedro Cardoso Rodriguez
 */
public class DtsAsis extends JPanel implements ActionListener, TableModelListener{
    
    private ContDatos contenedor; // referencia al contenedor superior
    private BasicArrowButton btnDisplay;
    private boolean hayCambios;
    
    /** Creates new form BeanForm */
    public DtsAsis(ContDatos contenedor) {
        initComponents();
        this.contenedor=contenedor;
        btnDisplay=new BasicArrowButton(SwingConstants.WEST);
        btnDisplay.addActionListener(this);
        btnDisplay.setToolTipText("Desplegar "+lblTitle.getText());
        btnDisplay.setDirection(SwingConstants.NORTH);
        pnlNorth.add(btnDisplay,java.awt.BorderLayout.EAST);
        btnAgrega.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnQuita.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnImport.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnGuarda.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnImprime.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        btnCsv.setColors(new Color(223,232,254),new Color(108,155,254),new Color(155,255,255));
        iniModelo(); hayCambios=false;
    }
    
    public void setTitle(String tit, String contentReference){
        lblTitle.setText(tit);
        btnDisplay.setToolTipText("Desplegar "+tit);
        lblTitle.setToolTipText(contentReference);
    }
    
    private void iniModelo(){
        jtbTabla.setModel(new ModeloAsis((DefaultTableModel)jtbTabla.getModel()));
        ocultaColumna("clvdts");
        jtbTabla.getColumn("Nombre").setPreferredWidth(80);
        jtbTabla.getColumn("A Paterno").setPreferredWidth(80);
        jtbTabla.getColumn("A Materno").setPreferredWidth(80);
        jtbTabla.getColumn("Direccion").setPreferredWidth(140);
        jtbTabla.getColumn("Ciudad").setPreferredWidth(80);
        jtbTabla.getColumn("Estado").setPreferredWidth(80);
        jtbTabla.getColumn("Tel Casa").setPreferredWidth(85);
        jtbTabla.getColumn("Tel Oficina").setPreferredWidth(85);
        jtbTabla.getColumn("Tel Movil").setPreferredWidth(85);
        jtbTabla.getColumn("Titulo Profecional").setPreferredWidth(120);
        jtbTabla.getColumn("Correo Electronico").setPreferredWidth(120);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlNorth = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        pnlContainer = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbTabla = new javax.swing.JTable();
        btnAgrega = new com.guis.SimpleButton();
        btnQuita = new com.guis.SimpleButton();
        btnImport = new com.guis.SimpleButton();
        btnGuarda = new com.guis.SimpleButton();
        btnImprime = new com.guis.SimpleButton();
        btnCsv = new com.guis.SimpleButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());

        pnlNorth.setLayout(new java.awt.BorderLayout());

        lblTitle.setText("Title");
        pnlNorth.add(lblTitle, java.awt.BorderLayout.CENTER);

        add(pnlNorth, java.awt.BorderLayout.NORTH);

        jtbTabla.setAutoCreateRowSorter(true);
        jtbTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "clvdts", "Nombre", "A Paterno", "A Materno", "Direccion", "Ciudad", "Estado", "Tel Casa", "Tel Oficina", "Tel Movil", "Titulo Profecional", "Correo Electronico"
            }
        ));
        jtbTabla.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jtbTabla);
        jtbTabla.getColumnModel().getColumn(1).setPreferredWidth(200);
        jtbTabla.getColumnModel().getColumn(7).setPreferredWidth(90);
        jtbTabla.getColumnModel().getColumn(9).setPreferredWidth(90);
        jtbTabla.getColumnModel().getColumn(11).setPreferredWidth(110);

        btnAgrega.setText("Agregar");
        btnAgrega.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregaActionPerformed(evt);
            }
        });

        btnQuita.setText("Quitar");
        btnQuita.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitaActionPerformed(evt);
            }
        });

        btnImport.setText("Importar");
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        btnGuarda.setText("Guardar");
        btnGuarda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardaActionPerformed(evt);
            }
        });

        btnImprime.setText("Imprimir");
        btnImprime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimeActionPerformed(evt);
            }
        });

        btnCsv.setText("Exportar a CSV");
        btnCsv.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCsvActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlContainerLayout = new javax.swing.GroupLayout(pnlContainer);
        pnlContainer.setLayout(pnlContainerLayout);
        pnlContainerLayout.setHorizontalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 615, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlContainerLayout.createSequentialGroup()
                        .addComponent(btnAgrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnQuita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnGuarda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImprime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCsv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnlContainerLayout.setVerticalGroup(
            pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuarda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImprime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCsv, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuita, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgrega, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                .addContainerGap())
        );

        add(pnlContainer, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_formMouseEntered

    private void btnAgregaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregaActionPerformed
        int clvcong=contenedor.getClave();
        String aux;
        if(clvcong<1){
            aux="<html>Primero debe guardar los datos generales del congreso<br> Para poder agregar datos de asistentes</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return;
        }
        ((ModeloAsis)jtbTabla.getModel()).agregaFila();
        hayCambios=true;
    }//GEN-LAST:event_btnAgregaActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        DialogImportPerson bscprns;
        ModeloAsis modelo;
        String aux;
        String[] datos;
        int clv=contenedor.getClave();
        if(clv<1){
            aux="<html>Primero debe guardar los datos generales del congreso<br> Para poder importar datos de asistentes</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return;
        }
        bscprns=new DialogImportPerson(((Ventana)getTopLevelAncestor()),true);
        datos=bscprns.getDatosImp();
        if(datos==null) return;
        // buscar que no existe aqui clv si no existe crear la relacion
        clv=Integer.parseInt(datos[0]);
        modelo=((ModeloAsis)jtbTabla.getModel());
        for(int y=0;y<modelo.getRowCount();y++)
            if(Integer.parseInt(""+modelo.getValueAt(y,0))==clv){
                aux="<html>La persona a importar ya esta registrada<br>No puede registrar en esta area la misma persona mas de una vez</html>";
                ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
                return;
            }
        aux="insert into asistentes values("+contenedor.getClave()+","+clv+");";
        if(!BaseDatos.InsUpdBD.actualiza(aux)){
            aux="<html>No se pudo importar la persona indicada<br>Ocurrio el error: "+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return;
        }
        aux="<html>La persona indicada ha sido importada<br>Indique la asistencia a eventos</html>";
        ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.INF_MESS);
        modelo.agregaPersona(datos);
        modelo.addTableModelListener(this);
        jtbTabla.setModel(modelo); hayCambios=true;
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnGuardaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardaActionPerformed
        guardaCambios();
    }//GEN-LAST:event_btnGuardaActionPerformed

    private void btnQuitaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitaActionPerformed
        java.util.ArrayList<String> coms;
        java.util.ArrayList<String> com;
        int[] filas=jtbTabla.getSelectedRows();
        int clave;
        String aux;
        if(filas.length<=0) return;
        aux="<html>En verdad desea quitar las personas seleccionadas de la tabla<br>";
        aux+="Esta accion no se podra deshacer<br>Â¿Desea continuar?</html>";
        if(!((Ventana)getTopLevelAncestor()).askYesNoOption(aux)) return;
        coms=new java.util.ArrayList<String>();
        for(int f=0;f<filas.length;f++){
            clave=Integer.parseInt(""+jtbTabla.getValueAt(filas[f],0));
            com=FunsComms.getComBorrarPersona(clave,3,contenedor.getClave());
            for(int g=0;g<com.size();g++) coms.add(com.get(g));
        }
        if(BaseDatos.InsUpdBD.transaccion(coms)){
            actualizaLista();
            aux="<html>Accion realizada<br>Se quitaron las personas seleccionadas</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.INF_MESS);
        }
        else{
            aux="<html>Error al intertar realizar la accion:<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
        }
    }//GEN-LAST:event_btnQuitaActionPerformed

    private void btnImprimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimeActionPerformed
        Map<String,String> parametros = new HashMap<String,String>();
        ArrayList campos=new ArrayList();
        CamposReport.CampoAsis campo;
        String aux;
        if(jtbTabla.getRowCount()==0){
            ((Ventana)getTopLevelAncestor()).message("<html>No se puede imprimir<br>La tabla esta vacia</html>",DialogMessages.ERROR_MESS);
            return;
        }
        parametros.put("TITCONG",contenedor.getTitCon());
        parametros.put("TEMACONG",contenedor.geTemaCon());
        parametros.put("PERIODOCONG",contenedor.getPerCon());
        for(int s=0;s<jtbTabla.getRowCount();s++){
            aux=""+jtbTabla.getValueAt(s,1)+" "+jtbTabla.getValueAt(s,2)+" "+jtbTabla.getValueAt(s,3);
            campo=new CamposReport.CampoAsis(aux);
            campos.add(campo);
        }
        ((Ventana)getTopLevelAncestor()).sendToPrint("Tabla de Asistentes",4,parametros,campos); 
    }//GEN-LAST:event_btnImprimeActionPerformed

    private void btnCsvActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCsvActionPerformed
        if(jtbTabla.getRowCount()==0){
            ((Ventana)getTopLevelAncestor()).message("<html>No se puede exportar<br>La tabla esta vacia</html>",DialogMessages.ERROR_MESS);
            return;
        }
        ((Ventana)getTopLevelAncestor()).exportTablaToCSV(4,jtbTabla.getModel());
    }//GEN-LAST:event_btnCsvActionPerformed
    
    /** Guarda los cambios realizados en los datos de la tabla
     * @return true si se pudieron guardar lo cambios false en caso contrario
     */
    public boolean guardaCambios(){
        java.util.ArrayList<String> coms;
        String aux;
        String[] dts;
        int clvtemp;
        boolean asis;
        if(contenedor.getClave()<1){
            aux="<html>Primero debe guardar los datos generales del congreso<br> Para poder guardar datos de asistentes</html>";
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return false;
        }
        aux=hayDatoInvalido();
        if(aux!=null){
            ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
            return false;
        }
        coms=new java.util.ArrayList<String>();
        for(int f=0;f<jtbTabla.getRowCount();f++){ // guardar nuevos
            if(Integer.parseInt(""+jtbTabla.getValueAt(f,0))==-1){
                clvtemp=guardaFila(f);
                if(clvtemp==-1) return false;
                jtbTabla.setValueAt(""+clvtemp,f,0);
            }
            else{
                dts=getDatos(f,true);
                aux="update DtsPers set Nombre='"+dts[1]+"',Appat='"+dts[2]+"',Apmat='";
                aux+=dts[3]+"',Dir='"+dts[4]+"',Ciudad='"+dts[5]+"',Estado='"+dts[6];
                aux+="',TelCasa='"+dts[7]+"',TelOfic='"+dts[8]+"',TelMovil='"+dts[9];
                aux+="',CorreoE='"+dts[11]+"',Titulo='"+dts[10]+"' where ClvDts="+dts[0]+";";
                clvtemp=Integer.parseInt(dts[0]);
                coms.add(aux);
            }
            for(int g=0;g<((ModeloAsis)jtbTabla.getModel()).getNumEventos();g++){
                asis=(jtbTabla.getValueAt(f,g+4)!=null?jtbTabla.getValueAt(f,g+4).equals(true):false);
                aux="update AsisEven set asis="+(asis?1:0);
                aux+=" where ClvEven="+((ModeloAsis)jtbTabla.getModel()).getClaveEvento(g+4);
                aux+=" and ClvDts="+clvtemp+";";
                coms.add(aux);
            }
        }
        if(coms.size()>0){
            if(!BaseDatos.InsUpdBD.transaccion(coms)){ // hacer update de todo
                aux="<html>Error al intertar realizar la accion:<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
                ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.ERROR_MESS);
                return false;
            }
        }
        aux="<html>Accion realizada<br>Se guardaron los datos de Asistentes</html>";
        ((Ventana)getTopLevelAncestor()).message(aux,DialogMessages.INF_MESS);
        hayCambios=false; return true;
    }
    
    /** Revisa si hay algun dato invalido en la tabla
     * @return Cadena con la descripcion del dato invalido o null si todos los datos son validos
     */
    private String hayDatoInvalido(){
        String[] datos;
        for(int x=0;x<jtbTabla.getRowCount();x++){
            datos=getDatos(x,false);
            if(datos[0].length()<1||datos[0].length()>85)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Nombre</font> invalido, longitud invalida</html>";
            if(datos[1].length()<1||datos[1].length()>85)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Apellido paterno</font> invalido, longitud invalida</html>";
            if(datos[2].length()<1||datos[2].length()>85)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Apellido materno</font> invalido, longitud invalida</html>";
            if(datos[3].length()<1||datos[3].length()>45)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Direccion</font> invalida, longitud invalida</html>";
            if(datos[4].length()<1||datos[4].length()>25)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Ciudad</font> invalida, longitud invalida</html>";
            if(datos[5].length()<1||datos[5].length()>25)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Estado</font> invalido, longitud invalida</html>";
            if(datos[6].length()<1||datos[6].length()>10)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Telefono de casa</font> invalido, longitud invalida</html>";
            if(datos[7].length()<1||datos[7].length()>20)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Telefono de oficina</font> invalido, longitud invalida</html>";
            if(datos[8].length()<1||datos[8].length()>10)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Telefono movil</font> invalido, longitud invalida</html>";
            if(datos[9].length()>125)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Titulo Profecional</font> invalido, longitud invalida</html>";
            if(datos[10].length()<1||datos[10].length()>25)
                return "<html>Hay datos invalidos en Asistentes<br>En fila: "+(x+1)+", <font color=\"RED\">Correo electronico</font> invalido, longitud invalida</html>";
        }
        return null;
    }
    
    /** Obtiene los datos personales de una fila de la tabla
     * @param fila numero de fila de la tabla de la cual obtener los datos
     * @param clave si es true incluye la clave como primer datos del vetor
     * @return los datos obtenidos segun fila y clave
     */
    private String[] getDatos(int fila, boolean clave){
        String[] datos=new String[clave?12:11];
        for(int c=(clave?0:1),d=0;c<jtbTabla.getColumnCount();c++,d++){
            while(jtbTabla.getColumnClass(c)==Boolean.class) c++;
            datos[d]=""+jtbTabla.getValueAt(fila,c);
        }
        return datos;
    }
    
    /** Guarda los datos de una fila de la tabla (para filas nuevas sin clave)
     * @param fila el numero de la fila a guardar
     * @return true si los datos se guardaron false en caso contrario
     */
    private int guardaFila(int fila){
        int intAux;
        String[] dts=getDatos(fila,false);
        String sen="select count(ClvDts) from DtsPers where Nombre='";
        sen+=dts[0]+"' and Appat='"+dts[1]+"' and Apmat='"+dts[2]+"';";
        intAux=BaseDatos.ConsultasBD.consultaEntero(sen);
        if(intAux==-1){
            sen="<html>Error al intentar verificar datos previos al registro<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS);
            return -1;
        }
        else if(intAux>0){
            sen="<html>Ya existe un registro a nombre de:<br><u>"+dts[0]+" "+dts[1]+" "+dts[2];
            sen+="</u><br>Si es la misma persona use el boton <u>importar</u><br>Si esta seguro que ";
            sen+="se trata de personas distintas elija continuar<br>Â¿Desea continuar?</html>";
            if(!((Ventana)getTopLevelAncestor()).askYesNoOption(sen)) return -1;
        }
        sen=dts[dts.length-1]; dts[dts.length-1]=dts[dts.length-2]; dts[dts.length-2]=sen;
        if(!BaseDatos.InsUpdBD.nuevoDtsPers(dts)){
            sen="<html>Error al intentar guardar datos de fila: "+(fila+1)+"<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS);
            return -1;
        }
        intAux=BaseDatos.InsUpdBD.obtenClave();
        sen="insert into Asistentes values("+contenedor.getClave()+","+intAux+");";
        if(!BaseDatos.InsUpdBD.actualiza(sen)){
            BaseDatos.InsUpdBD.actualiza("delete from DtsPers where ClvDts="+intAux+";");
            sen="<html>Error al intentar guardar datos de fila: "+(fila+1)+"<br>"+BaseDatos.InsUpdBD.obtenError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS);
            return -1;
        }
        return intAux;
    }
    
    public void setColor(Color back,Color titleBar,Color body,Color borderColor,Color btnVerColor,Color toolTip){
        setBackground(back);
        pnlNorth.setBackground(titleBar);
        pnlContainer.setBackground(body);
        btnDisplay.setBackground(btnVerColor);
        setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11),borderColor));
        this.createToolTip().setBackground(toolTip);
        btnDisplay.createToolTip().setBackground(toolTip);
    }
    
    /** Carga los datos de la tabla
     * @return true si los datos se cargaron correctamente false en caso contrario
     */
    public boolean cargaDatos(){
        return actualizaLista();
    }
    
    /** Actualiza los datos de la tabla
     * @return true si los datos se actualizaron correctamente false en caso contrario
     */
    private boolean actualizaLista(){
        DefaultTableModel modelo;
        ModeloAsis modelo2;
        String sen="select dtspers.clvdts,Nombre,Appat as 'A Paterno',Apmat as 'A Materno',";
        sen+="Dir as 'Direccion',Ciudad,Estado,Telcasa as 'Tel Casa',telofic as 'Tel Oficina'";
        sen+=",telmovil as 'Tel Movil',Titulo as 'Titulo Profecional',correoe as 'Correo ";
        sen+="Electronico' from asistentes,dtspers where asistentes.clvdts=dtspers.clvdts and ";
        sen+="asistentes.clvcon="+contenedor.getClave()+" order by appat,apmat,nombre;";
        modelo=BaseDatos.ConsultasBD.consTipoTable(sen);
        if(modelo==null){
            sen="<html>Error al intentar actualizar la tabla de asistentes<br>"+BaseDatos.ConsultasBD.getError()+"</html>";
            ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS);
            return false;
        }
        modelo2 = new ModeloAsis(modelo);
        modelo2.addTableModelListener(this);
        jtbTabla.setModel(modelo2);
        (jtbTabla.getTableHeader()).setReorderingAllowed(false);
        ocultaColumna("clvdts"); hayCambios=false;
        jtbTabla.getColumn("Nombre").setPreferredWidth(80);
        jtbTabla.getColumn("A Paterno").setPreferredWidth(80);
        jtbTabla.getColumn("A Materno").setPreferredWidth(80);
        jtbTabla.getColumn("Direccion").setPreferredWidth(140);
        jtbTabla.getColumn("Ciudad").setPreferredWidth(80);
        jtbTabla.getColumn("Estado").setPreferredWidth(80);
        jtbTabla.getColumn("Tel Casa").setPreferredWidth(85);
        jtbTabla.getColumn("Tel Oficina").setPreferredWidth(85);
        jtbTabla.getColumn("Tel Movil").setPreferredWidth(85);
        jtbTabla.getColumn("Titulo Profecional").setPreferredWidth(120);
        jtbTabla.getColumn("Correo Electronico").setPreferredWidth(120);
        return true;
    }
    
    /** Oculta una columna de la tabla
     * @param nomCol El nombre de la columna a ocultar
     */
    private void ocultaColumna(String nomCol){
        jtbTabla.getColumn(nomCol).setPreferredWidth(0);
        jtbTabla.getColumn(nomCol).setMinWidth(0);
        jtbTabla.getColumn(nomCol).setMaxWidth(0);
        jtbTabla.getColumn(nomCol).setResizable(false);
    }
    
    /** Obtiene si hay cambios en los datos de la tabla sin guardar
     * @return true si hay cambios en los datos de la tabla sin guardar false en caso contrario
     */
    public boolean hayCambios(){
        return hayCambios;
    }
    
    /** Obtiene los comandos de borrado de registros para los datos de la tabla
     * @return los comandos de borrado de registros para los datos de la tabla
     */
    public java.util.ArrayList<String> getComsDelete(){
        java.util.ArrayList<String> coms;
        java.util.ArrayList<String> com;
        int clave;
        coms=new java.util.ArrayList<String>();
        for(int y=0;y<jtbTabla.getRowCount();y++){
            clave=Integer.parseInt(""+jtbTabla.getValueAt(y,0));
            com=FunsComms.getComBorrarPersona(clave,3,contenedor.getClave());
            for(int g=0;g<com.size();g++) coms.add(com.get(g));
        }
        return coms;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.guis.SimpleButton btnAgrega;
    private com.guis.SimpleButton btnCsv;
    private com.guis.SimpleButton btnGuarda;
    private com.guis.SimpleButton btnImport;
    private com.guis.SimpleButton btnImprime;
    private com.guis.SimpleButton btnQuita;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jtbTabla;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JPanel pnlContainer;
    private javax.swing.JPanel pnlNorth;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        if(btnDisplay.getDirection()==SwingConstants.SOUTH){
            pnlContainer.setVisible(true);
            btnDisplay.setDirection(SwingConstants.NORTH);
        }
        else{
            pnlContainer.setVisible(false);
            btnDisplay.setDirection(SwingConstants.SOUTH);
        }
        this.getTopLevelAncestor().validate();
    }

    /** Clase con la definicion del modelo de datos de la tabla */
    private class ModeloAsis extends DefaultTableModel{
        
        private int nEventos;
        private int[] clvsEventos;
        
        public ModeloAsis(DefaultTableModel m){
            for(int f=0;f<m.getColumnCount();f++){
                if(f==4) cargaEventos(m.getRowCount());
                addColumn(m.getColumnName(f));
                for(int h=0;h<m.getRowCount();h++){
                    if(f==0) addRow(new Object[]{""});
                    setValueAt(m.getValueAt(h,f),h,getColumnCount()-1);
                }
            }
        }
        
        /** Carga los eventos actuales del congreso actual
         * @param nAsis numero de asistentes actuales del congreso actual
         */
        private void cargaEventos(int nAsis){
            String[][] eventos=null;
            String sen="select eventos.clveven,titeven from eventos,planea where ";
            sen+="eventos.clveven=planea.clveven and planea.clvcon="+contenedor.getClave();
            sen+=" order by fechayhora;";
            // consultar eventos
            eventos=BaseDatos.ConsultasBD.consultaArray(sen);
            if(eventos==null){
                sen="<html>Error al intentar consultar lista de eventos"+BaseDatos.ConsultasBD.getError()+"</html>";
                nEventos=0; clvsEventos=null;
                try{ ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS); }
                catch(NullPointerException npExc){ return; }
                return;
            }
            if(eventos[0][0]!=null){
                clvsEventos=new int[eventos.length];
                nEventos=clvsEventos.length;
                for(int f=0;f<eventos.length;f++){
                    clvsEventos[f]=Integer.parseInt(eventos[f][0]);
                    addColumn(eventos[f][1]);
                }
            }
            // consultar asistencias
            sen="select asiseven.clveven,asiseven.clvdts,asis ";
            sen+="from asistentes,dtspers,asiseven,eventos,planea where asistentes.";
            sen+="clvdts=dtspers.clvdts and asistentes.clvcon="+contenedor.getClave();
            sen+=" and asiseven.clvdts=asistentes.clvdts and eventos.clveven=planea.";
            sen+="clveven and planea.clvcon="+contenedor.getClave()+" and asiseven.";
            sen+="clveven=eventos.clveven order by fechayhora,appat,apmat,nombre;";
            eventos=BaseDatos.ConsultasBD.consultaArray(sen);
            if(eventos==null){
                sen="<html>Error al intentar consultar asistencia por eventos"+BaseDatos.ConsultasBD.getError()+"</html>";
                nEventos=0; clvsEventos=null;
                ((Ventana)getTopLevelAncestor()).message(sen,DialogMessages.ERROR_MESS);
                return;
            }
            if(eventos[0][0]!=null){
                for(int f=0;f<getRowCount();f++){
                    for(int y=0;y<nEventos;y++){
                        setValueAt(eventos[f+(nAsis*y)][2].equals("true"),f,y+4);
                    }
                }
            }
        }
        
        /** Obtiene el numero de eventos actuales del congreso actual
         * @return el numero de eventos actuales del congreso actual
         */
        public int getNumEventos(){ return nEventos; }
       
        /** Agrega una fila vacia al modelo de datos de la tabla
         */
        public void agregaFila(){
            Object[] obj=new Object[getColumnCount()];
            obj[0]="-1";
            for(int d=1;d<obj.length;d++){
                if(nEventos>0 && d>=4 && d<=(3+nEventos))
                    obj[d]=false;
                else obj[d]="";
            }
            addRow(obj);
        }
        
        /** Agrega una fila con los datos de la persona recibida en dts  
         *   Para la funcion importar
         * @param dts los datos de la persona a agregar
         */
        public void agregaPersona(String[] dts){
            Object[] obj=new Object[getColumnCount()];
            for(int d=0,e=0;d<obj.length;d++){
                if(nEventos>0 && d>=4 && d<=(3+nEventos))
                    obj[d]=false;
                else obj[d]=dts[e++];
            }
            addRow(obj);
        }
        
        @Override
        public Class getColumnClass(int columnIndex){
            if(nEventos>0){
                if(columnIndex>=4 && columnIndex<=(3+nEventos)) 
                    return Boolean.class;
            }
            return String.class;
        }
        
        @Override
        public boolean isCellEditable(int row, int col){
            return (col>0);
        }
        
        public int getClaveEvento(int colIdx){
            if(clvsEventos==null) return -1;
            return clvsEventos[colIdx-4];
        }
    }

    public void tableChanged(TableModelEvent e) {
        hayCambios=true;
    }
}
